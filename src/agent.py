from datetime import datetime
from pathlib import Path
from textwrap import dedent
from typing import Dict, List
from agno.agent import Agent,RunResponse
from agno.models.google import Gemini
# from agno.tools.exa import ExaTools
from agno.tools.duckduckgo import DuckDuckGoTools
# from rich.pretty import pprint
cwd = Path(__file__).parent.resolve()
tmp = cwd.joinpath("reports")
if not tmp.exists():
    tmp.mkdir(exist_ok=True, parents=True)

today = datetime.now().strftime("%Y-%m-%d")

class SalaryResearchAgent:
    def __init__(self):
        self.agent = Agent(
            model=Gemini(id="gemini-2.0-flash-exp",api_key="AIzaSyBHTV8_2Ul2nrKdLEht5BKWbQEkgIZvqIA"),
            tools=[
                DuckDuckGoTools(),
                
            ],
            description=dedent("""\
                You are CompAnalyst-2000, a specialized compensation research analyst with 
                expertise in analyzing global salary trends, industry compensation patterns,
                and skill-based pay differentials. Your specialty lies in creating detailed,
                data-driven compensation reports that combine market analysis with actionable insights.

                Your analysis style is:
                - Data-driven and precise
                - Market-aware and contextual
                - Skills and industry-focused
                - Accessible to both HR professionals and job seekers\
            """),
            instructions=dedent("""\
                1. Gather compensation data based on provided parameters:
                   - Years of Experience (YOE)
                   - Job Role/Title
                   - Required Skills
                   - Industry Sector
                   - Company Size
                   - Geographic Location
            
                
                2. Conduct three types of analysis:
                   - Market rate analysis
                   - Skill premium calculation
                   - Industry/company size adjustments
                
                3. Cross-reference multiple data sources for validation
                4. Apply geographic and economic adjustments
                5. Generate percentile breakdowns (25th, 50th, 75th, 90th)
                6. Include future growth projections\
            """),
            expected_output=dedent("""\
                # Compensation Analysis Report: {Job_Title}

                ## Executive Summary
                {Overview of key compensation findings and market position}

                ## Market Analysis
                ### Base Salary Range
                - 25th Percentile: ${amount}
                - Median: ${amount}
                - 75th Percentile: ${amount}
                - 90th Percentile: ${amount}

                ### Total Compensation Structure
                - Base Salary: {percentage_range}
                - Annual Bonus: {percentage_range}
                - Stock/Equity: {percentage_range}
                - Benefits Value: {percentage_range}

                ## Skills Premium Analysis:(tabular format)
                {Breakdown of how specific skills affect compensation}
                
                ## Industry Context
                {Industry-specific compensation trends}
                {Company size impact analysis}

                ## Geographic Considerations
                {Location-based adjustments}
                {Remote work implications}

                ## Growth Trajectory
                {Career progression paths}
                {Expected compensation growth}

                ## Recommendations
                - {Negotiation strategy}
                - {Skill development priorities}
                - {Career positioning}

                ## Data Sources
                - [Source 1](link) - {Key insight}
                - [Source 2](link) - {Key insight}
                - [Source 3](link) - {Key insight}

                ---
                Report generated by CompAnalyst-2000
                Compensation Intelligence Division
                Date: {current_date}\
            """),
            
            show_tool_calls=True,
            add_datetime_to_instructions=True,
            structured_outputs=True
        )

    def analyze_compensation(
        self,
        job_title: str,
        yoe: int,
        skills: List[str],
        industry: str,
        company_size: str,
        location: str = "Remote"
    ) -> Dict:
        """
        Generate a comprehensive compensation analysis report.
        
        Args:
            job_title: Target job role
            yoe: Years of experience
            skills: List of relevant skills
            industry: Industry sector
            company_size: Company size category
            location: Geographic location or "Remote"
            
        Returns:
            Dict containing the complete analysis report
        """
        query = f"""
        Analyze compensation for {job_title} role with:
        - {yoe} years of experience
        - Skills: {', '.join(skills)}
        - Industry: {industry}
        - Company Size: {company_size}
        - Location: {location}
        """
        structured_output_response: RunResponse = self.agent.run(query)
        return structured_output_response.content

# Example usage
# if __name__ == "__main__":
#     # Initialize the agent
#     salary_agent = SalaryResearchAgent()
    
#     # Generate a compensation analysis report
#     report = salary_agent.analyze_compensation(
#         job_title="AI Engineer",
#         yoe=1,
#         skills=["Python", "Machine Learning", "Deep Learning","AI"],
#         industry="Technology",
#         company_size="1-50 employees",
#         location="Pune, India"
#     )
    
    

